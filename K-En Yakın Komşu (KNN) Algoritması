from sklearn.neighbors import KNeighborsClassifier

# Farklı k değerleri için doğruluk skorlarını hesaplama
k_values = range(1, 30)
accuracies = []

for k in k_values:
    knn = KNeighborsClassifier(n_neighbors=k)
    knn.fit(X_train_scaled, y_train)
    y_pred = knn.predict(X_test_scaled)
    accuracies.append(accuracy_score(y_test, y_pred))

# En iyi k değerini bulma
best_k = k_values[np.argmax(accuracies)]
best_accuracy = max(accuracies)

# Grafik
plt.figure(figsize=(10, 6))
plt.plot(k_values, accuracies, marker='o')
plt.axvline(x=best_k, color='r', linestyle='--')
plt.title(f'KNN için Optimal k Değeri: {best_k} (Doğruluk: {best_accuracy:.2f})')
plt.xlabel('k Değeri')
plt.ylabel('Doğruluk')
plt.grid()
plt.show()

# En iyi modelle tahmin yapma
knn = KNeighborsClassifier(n_neighbors=best_k)
knn.fit(X_train_scaled, y_train)
y_pred = knn.predict(X_test_scaled)

# Karışıklık matrisi
cm = confusion_matrix(y_test, y_pred)
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
plt.title('KNN Karışıklık Matrisi')
plt.show()

print("KNN Sınıflandırma Raporu:")
print(classification_report(y_test, y_pred))
